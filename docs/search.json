[{"path":"http://shawnschwartz.com/eyeris/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 eyeris authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://shawnschwartz.com/eyeris/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shawn Tyler Schwartz. Author, maintainer.","code":""},{"path":"http://shawnschwartz.com/eyeris/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schwartz ST (2024). eyeris: Create Run Flexible Reproducible Pupillometry Preprocessing Pipelines. R package version 0.0.0.9000, https://shawnschwartz.com/eyeris.","code":"@Manual{,   title = {eyeris: Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines},   author = {Shawn Tyler Schwartz},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://shawnschwartz.com/eyeris}, }"},{"path":[]},{"path":"http://shawnschwartz.com/eyeris/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines","text":"can install development version eyeris GitHub : ","code":"# install.packages(\"devtools\") devtools::install_github(\"shawntz/eyeris\") # install.packages(\"pak\") pak::pak(\"shawntz/eyeris\")"},{"path":[]},{"path":"http://shawnschwartz.com/eyeris/index.html","id":"the-glassbox-prescription-function","dir":"","previous_headings":"Example","what":"the glassbox() “prescription” function","title":"Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines","text":"basic example use eyeris box opinionated set steps parameters one start preprocessing pupillometry data. Critically, “glassbox” – opposed “blackbox” – since step parameter implemented herein fully open accessible . designed pipeline step / function like legos – intentionally carefully designed way allows flexibly construct compare different pipelines. hope enjoy! -shawn","code":"set.seed(1)  library(eyeris)  demo_data <- system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\")  eyeris_preproc <- glassbox(demo_data, detrend_data = F, lpfilt = list(plot_freqz = T)) #> ✔ [  OK  ] - Running eyeris::load_asc() #> ✔ [  OK  ] - Running eyeris::deblink() #> ✔ [  OK  ] - Running eyeris::detransient() #> ✔ [  OK  ] - Running eyeris::interpolate() #> ℹ [ INFO ] - Skipping eyeris::interpolate(): No NAs detected in pupil data for interpolation. #> ✔ [  OK  ] - Running eyeris::lpfilt() #> ✔ [  OK  ] - Skipping eyeris::detrend() #> ✔ [  OK  ] - Running eyeris::zscore()"},{"path":"http://shawnschwartz.com/eyeris/index.html","id":"step-wise-correction-of-pupillary-signal","dir":"","previous_headings":"Example","what":"step-wise correction of pupillary signal","title":"Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines","text":"","code":"plot(eyeris_preproc)"},{"path":"http://shawnschwartz.com/eyeris/index.html","id":"final-pre-post-correction-of-pupillary-signal-raw---preprocessed","dir":"","previous_headings":"Example","what":"final pre-post correction of pupillary signal (raw -> preprocessed)","title":"Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines","text":"","code":"plot(eyeris_preproc, steps = c(1, 5), preview_window = c(0, 100000))"},{"path":"http://shawnschwartz.com/eyeris/index.html","id":"comments-suggestions-questions-issues","dir":"","previous_headings":"","what":"Comments, suggestions, questions, issues","title":"Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines","text":"Please use issues tab (https://github.com/shawntz/eyeris/issues) make note bugs, comments, suggestions, feedback, etc… welcomed appreciated, thanks!","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/bidsify.html","id":null,"dir":"Reference","previous_headings":"","what":"Save out pupil timeseries data in a BIDS-like structure — bidsify","title":"Save out pupil timeseries data in a BIDS-like structure — bidsify","text":"method provides structured way save pupil data BIDS-like structure. method saves epoched data well raw pupil timeseries, formats directory filename structures based metadata provide.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/bidsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save out pupil timeseries data in a BIDS-like structure — bidsify","text":"","code":"bidsify(   eyeris,   save_all = TRUE,   epochs_list = NULL,   merge_epochs = FALSE,   bids_dir = NULL,   participant_id = NULL,   session_num = NULL,   task_name = NULL,   run_num = NULL,   save_raw = TRUE,   render_report = TRUE,   html_report = TRUE,   pdf_report = TRUE,   report_seed = 0 )"},{"path":"http://shawnschwartz.com/eyeris/reference/bidsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save out pupil timeseries data in a BIDS-like structure — bidsify","text":"eyeris object class eyeris dervived load(). save_all Logical flag indicating whether epochs saved subset . Defaults TRUE. epochs_list List epochs saved. Defaults NULL. merge_epochs Logical flag indicating whether epochs saved one file separate files. Defaults FLASE (merge). bids_dir Base bids_directory. participant_id BIDS subject ID. session_num BIDS session ID. task_name BIDS task ID. run_num BIDS run ID. save_raw Logical flag indicating whether save_raw pupil data addition epoched data. Defaults TRUE. render_report Logical flag indicating whether save eyeris preprocessing summary report. Defaults TRUE. html_report Logical flag indicating whether save eyeris preprocessing summary report HTML file. Defaults TRUE. pdf_report Logical flag indicating whether save eyeris preprocessing summary report PDF file. Note, valid TeX distribution must already installed. Defaults TRUE. report_seed Random seed plots appear report. Defaults 0. See plot() detailed description.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/bidsify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save out pupil timeseries data in a BIDS-like structure — bidsify","text":"future, intend function save data official BIDS format eyetracking data (see proposal currently review ). time, however, function instead takes BIDS-inspired approach organizing output files preprocessed pupil data.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/bidsify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save out pupil timeseries data in a BIDS-like structure — bidsify","text":"","code":"# Bleed around blink periods just long enough to remove majority of #  deflections due to eyelid movements if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() |>   eyeris::interpolate() |>   eyeris::lpfilt(plot_freqz = TRUE) |>   eyeris::zscore() |>   eyeris::epoch(     events = \"PROBE_{type}_{trial}\",     limits = c(-2, 1), # grab 2 seconds prior to and 1 second post event     label = \"prePostProbe\" # custom epoch label name   ) |>   eyeris::bidsify(     bids_dir = \".\", # make bids dir in current directory     participant_id = \"001\",     session_num = \"01\",     task_name = \"assocret\",     run_num = \"01\"   ) } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/deblink.html","id":null,"dir":"Reference","previous_headings":"","what":"NA-pad blink events / missing data — deblink","title":"NA-pad blink events / missing data — deblink","text":"Deblinking (.k.. NA-padding) time series data. intended use method remove blink-related artifacts surrounding periods missing data. instance, individual blinks, usually rapid decreases followed increases pupil size, chunk data missing -'spike'-looking events. deblinking procedure NA-pad missing data point specified number ms.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/deblink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA-pad blink events / missing data — deblink","text":"","code":"deblink(eyeris, extend = 40)"},{"path":"http://shawnschwartz.com/eyeris/reference/deblink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA-pad blink events / missing data — deblink","text":"eyeris object class eyeris dervived load(). extend Either single number indicating number milliseconds pad forward/backward around missing sample, , vector length two indicating different numbers milliseconds pad forward/backward around missing sample, format c(backward, forward).","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/deblink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NA-pad blink events / missing data — deblink","text":"eyeris object new column: pupil_deblink.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/deblink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NA-pad blink events / missing data — deblink","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 40) # 40 ms in both directions } # }  system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = c(40, 50)) # 40 ms backward, 50 ms forward #> $file #> [1] \"/opt/homebrew/lib/R/4.4/site-library/eyeris/extdata/assocret.asc\" #>  #> $timeseries #> # A tibble: 22,145 × 8 #>    time_orig eye_x eye_y eye      hz type     pupil_raw pupil_raw_deblink #>        <int> <dbl> <dbl> <chr> <dbl> <chr>        <dbl>             <dbl> #>  1  11242177  949.  646. R      1000 diameter      6174              6174 #>  2  11242178  947.  644. R      1000 diameter      6176              6176 #>  3  11242179  946.  643  R      1000 diameter      6178              6178 #>  4  11242180  945.  642  R      1000 diameter      6179              6179 #>  5  11242181  945.  641. R      1000 diameter      6180              6180 #>  6  11242182  945.  642. R      1000 diameter      6182              6182 #>  7  11242183  945.  644. R      1000 diameter      6187              6187 #>  8  11242184  945.  644. R      1000 diameter      6197              6197 #>  9  11242185  945.  643. R      1000 diameter      6207              6207 #> 10  11242186  945.  642. R      1000 diameter      6203              6203 #> # ℹ 22,135 more rows #>  #> $events #> # A tibble: 67 × 3 #>    block     time text                       #>    <dbl>    <dbl> <chr>                      #>  1     1 11242177 !MODE RECORD CR 1000 2 1 R #>  2     1 11243349 EXP_START                  #>  3     1 11243355 TRIALID 0                  #>  4     1 11243356 START_TRIAL_0              #>  5     1 11243356 CUE_START_0                #>  6     1 11244328 CUE_STOP_0                 #>  7     1 11244329 DELAY_START_0              #>  8     1 11245337 DELAY_STOP_0               #>  9     1 11245338 PROBE_START_0              #> 10     1 11245956 RESPONSE_0                 #> # ℹ 57 more rows #>  #> $blinks #> # A tibble: 0 × 5 #> # ℹ 5 variables: block <int>, stime <dbl>, etime <dbl>, dur <dbl>, eye <fct> #>  #> $info #>                  date        model version sample.rate   cr  left right mono #> 1 2009-01-11 02:40:47 EyeLink 1000   4.594        1000 TRUE FALSE  TRUE TRUE #>   screen.x screen.y                                 mount filter.level #> 1     1920     1080 Desktop / Monocular / Head Stabilized            2 #>   sample.dtype event.dtype pupil.dtype velocity resolution htarg input buttons #> 1         GAZE        GAZE    DIAMETER    FALSE      FALSE FALSE FALSE   FALSE #>  #> $latest #> [1] \"pupil_raw_deblink\" #>  #> attr(,\"class\") #> [1] \"eyeris\""},{"path":"http://shawnschwartz.com/eyeris/reference/detransient.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove pupil samples that are physiologically unlikely — detransient","title":"Remove pupil samples that are physiologically unlikely — detransient","text":"intended use method removing pupil samples emerge quickly physiologically expected. accomplished rejecting samples exceed \"speed\"-based threshold (.e., median absolute deviation sample--sample). threshold computed based constant n, defaults value 16.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detransient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove pupil samples that are physiologically unlikely — detransient","text":"","code":"detransient(eyeris, n = 16)"},{"path":"http://shawnschwartz.com/eyeris/reference/detransient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove pupil samples that are physiologically unlikely — detransient","text":"eyeris object class eyeris dervived load(). n constant used compute median absolute deviation (MAD) threshold.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detransient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove pupil samples that are physiologically unlikely — detransient","text":"eyeris object new column timeseries: pupil_detransient.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detransient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove pupil samples that are physiologically unlikely — detransient","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/detrend.html","id":null,"dir":"Reference","previous_headings":"","what":"Detrend the pupil time series — detrend","title":"Detrend the pupil time series — detrend","text":"Linearly detrend_pupil data fitting linear model pupil_data ~ time, return fitted betas residuals (pupil_data - fitted_values).","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detrend the pupil time series — detrend","text":"","code":"detrend(eyeris)"},{"path":"http://shawnschwartz.com/eyeris/reference/detrend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detrend the pupil time series — detrend","text":"eyeris object class eyeris dervived load().","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detrend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detrend the pupil time series — detrend","text":"eyeris object two new columns timeseries: detrend_fitted_betas, pupil_detrend.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/detrend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detrend the pupil time series — detrend","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() |>   eyeris::interpolate() |>   eyeris::lpfilt(plot_freqz = TRUE) |>   eyeris::detrend() } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/epoch.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoch (and baseline) pupil data based on custom event message structure — epoch","title":"Epoch (and baseline) pupil data based on custom event message structure — epoch","text":"Intended used final preprocessing step. function creates data epochs either fixed dynamic durations respect provided events time limits, also includes intuitive metadata parsing feature additional trial data embedded within event messages can easily identified joined resulting epoched data frames.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/epoch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoch (and baseline) pupil data based on custom event message structure — epoch","text":"","code":"epoch(   eyeris,   events,   limits = NULL,   label = NULL,   calc_baseline = FALSE,   apply_baseline = FALSE,   baseline_type = c(\"sub\", \"div\"),   baseline_events = NULL,   baseline_period = NULL,   hz = NULL )"},{"path":"http://shawnschwartz.com/eyeris/reference/epoch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoch (and baseline) pupil data based on custom event message structure — epoch","text":"eyeris object class eyeris derived load(). events Either (1) single string representing event message perform trial extraction around, using specified limits center epoch around limits (just grabs data epochs subsequent event string type); (2) vector containing start end event message strings – , limits ignored duration trial epoch number samples matched start end event message pair; (3) list 2 dataframes manually specify start/end event timestamp-message pairs pull raw timeseries data – , required raw timestamp event message provided following format: list(data.frame(time = c(...), msg = c(...)), data.frame(time = c(...), msg = c(...))) first data.frame indicates start event timestamp message string pairs, second data.frame indicates end event timestamp message string pairs. event-modes 1 2, way pass event message string must conform standardized protocol eyeris knows find events (optionally) parse included metadata tidy epoch data outputs. two primary choices: either () specify string followed * wildcard expression (e.g., \"PROBE_START*), match messages \"PROBE_START ...\" (... referring potential metadata, trial number, stim file, etc.); (b) specify string using eyeris syntax: (e.g., \"PROBE_{type}_{trial}\"), match messages follow structure like \"PROBE_START_1\" \"PROBE_STOP_1\", generate two additional metadata columns: type trial, contain following values based two example strings: type: ('START', 'STOP'), trial: (1, 1). limits vector 2 values (start, end) seconds, indicating trial extraction occur centered around given start message string events parameter. label (optional) string can provide customize name resulting eyeris class object containing epoched data frame. left NULL (default), list item called epoch_xyz, xyz sanitized version original start event string provided matching. choose specify label , resulting list object name take form: epoch_label. calc_baseline flag indicated whether perform baseline correction. Note, setting calc_baseline TRUE alone compute baseline period, apply preprocessed timeseries unless apply_baseline also set TRUE. apply_baseline flag indicating whether apply calculated baseline pupil timeseries. baseline correction applied pupil latest preprocessing step. baseline_type Whether perform subtractive (sub) divisive (div) baseline correction. Defaults sub. baseline_events Similar events, baseline_events, can supply either (1) single string representing event message center baseline calculation around, indicated baseline_period; (2) single vector containing start end event message string – , baseline_period ignored duration baseline period mean calculated number samples matched start end event message pair, opposed specified fixed duration (described 1). Please note, providing list trial-level start/end message pairs (like events parameter) manually indicate unique start/end chunks baselining currently unsupported. Though, intend add feature later version eyeris, given likely heavily utilized / demand feature. baseline_period vector 2 values (start, end) seconds, indicating window data used perform baseline correction, centered around single string \"start\" message string provided baseline_events. , baseline_period ignored \"start\" \"end\" message string provided baseline_events argument. hz Data sampling rate. specified, use value contained within tracker's metadata.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/epoch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoch (and baseline) pupil data based on custom event message structure — epoch","text":"Updated eyeris object dataframes containing epoched data (epoch_).","code":""},{"path":[]},{"path":"http://shawnschwartz.com/eyeris/reference/eyeris-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eyeris: Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines — eyeris-package","title":"eyeris: Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines — eyeris-package","text":"(maybe one line) Use four spaces indenting paragraphs within Description.","code":""},{"path":[]},{"path":"http://shawnschwartz.com/eyeris/reference/eyeris-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eyeris: Create and Run Flexible and Reproducible Pupillometry Preprocessing Pipelines — eyeris-package","text":"Maintainer: Shawn Schwartz stschwartz@stanford.edu (ORCID)","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/glassbox.html","id":null,"dir":"Reference","previous_headings":"","what":"A ","title":"A ","text":"glassbox function (contrast \"blackbox\" function run get result (little) idea got input output) primary benefits calling exported function eyeris separately.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/glassbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ","text":"","code":"glassbox(   file,   confirm = FALSE,   detrend_data = FALSE,   num_previews = 3,   preview_duration = 5,   preview_window = NULL,   ... )"},{"path":"http://shawnschwartz.com/eyeris/reference/glassbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ","text":"file SR Research EyeLink .asc file generated official EyeLink edf2asc command. confirm flag indicate whether run glassbox pipeline autonomously way (set FALSE default), interactively provide visualization pipeline step, must also indicate \"(y)es\" \"(n)o\" either proceed cancel current glassbox pipeline operation (set TRUE). detrend_data flag indicate whether run detrend step (set FALSE default). Detrending pupil timeseries can unintended consequences; thus recommend users understand implications detrending – addition whether detrending appropriate research design question(s) – using function. num_previews Number random example \"epochs\" generate previewing effect preprocessing step pupil timeseries. preview_duration Time seconds randomly selected preview. preview_window start stop raw timestamps used subset preprocessed data step eyeris workflow visualization. Defaults NULL, meaning random epochs defined num_previews preview_duration plotted. override random epochs, set preview_window vector relative start stop times (e.g., c(5000, 6000) indicate raw data 5-6 seconds data recorded 1000 Hz). Note, start/stop time values indicated relate raw index position pupil sample 1 n (need specified manually user depending sampling rate recording; .e., 5000-6000 epoch positioned 5-6 seconds start timeseries, sampled 1000 Hz). ... Additional arguments override default, prescribed settings.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/glassbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A ","text":"First, glassbox function provides highly opinionated prescription steps starting parameters believe pupillometry researcher use defaults preprocessing pupillometry data. Second, mutually exclusive first point, using function ideally reduce probability accidental mishaps \"reimplementing\" steps preprocessing pipeline within across projects. hope streamline process way collect pupillometry dataset within minutes assess quality data simultaneously running full preprocessing pipeline 1-ish line code! Third, glassbox provides \"interactive\" framework can evaluate consequences parameters within step data real time, facilitating fairly easy--use workflow parameter optimization particular dataset. process essentially takes opinionated steps provides pre-/post-plot timeseries data step can adjust parameters re-run pipeline satisfied choices paramters consequences pupil timeseries data.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/glassbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A ","text":"","code":"if (FALSE) { # \\dontrun{ demo_data <- system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\")  # (1) examples using the default prescribed parameters and pipeline recipe ## (a) run an automated pipeline with no real-time inspection of parameters output <- eyeris::glassbox(demo_data)  ## (b) run a interactive workflow (with confirmation prompts after each step) output <- eyeris::glassbox(demo_data, confirm = TRUE)  # (2) examples overriding the default parameters output <- eyeris::glassbox(demo_data,   confirm = TRUE,   deblink = list(extend = 40),   lpfilt = list(plot_freqz = FALSE) ) } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate missing pupil samples — interpolate","title":"Interpolate missing pupil samples — interpolate","text":"Linear interpolation time series data. intended use method filling missing pupil samples (NAs) time series. method uses \"na.approx()\" function zoo package, implements linear interpolation using \"approx()\" function stats package. Currently, NAs beginning end data replaced values either end, respectively, using \"rule = 2\" argument approx() function.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate missing pupil samples — interpolate","text":"","code":"interpolate(eyeris)"},{"path":"http://shawnschwartz.com/eyeris/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate missing pupil samples — interpolate","text":"eyeris object class eyeris dervived load().","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate missing pupil samples — interpolate","text":"eyeris object new column timeseries: pupil_interpolate.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate missing pupil samples — interpolate","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() |>   eyeris::interpolate() } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/load_asc.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and parse SR Research EyeLink .asc files — load_asc","title":"Load and parse SR Research EyeLink .asc files — load_asc","text":"function builds upon eyelinker::read.asc() function parse messages metadata within EyeLink .asc file. loading additional processing, function returns S3 eyeris class use subsequent eyeris pipeline steps functions.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/load_asc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and parse SR Research EyeLink .asc files — load_asc","text":"","code":"load_asc(file)"},{"path":"http://shawnschwartz.com/eyeris/reference/load_asc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and parse SR Research EyeLink .asc files — load_asc","text":"file SR Research EyeLink .asc file generated official EyeLink edf2asc command.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/load_asc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and parse SR Research EyeLink .asc files — load_asc","text":"object S3 class eyeris following attributes: file: Path original .asc file. timeseries: Dataframe raw timeseries data tracker. events: Dataframe event messages timestamps. blinks: Dataframe blink events. info: Dataframe various metadata parsed file header. latest: eyeris variable tracking pipeline run history.","code":""},{"path":[]},{"path":"http://shawnschwartz.com/eyeris/reference/load_asc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and parse SR Research EyeLink .asc files — load_asc","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/lpfilt.html","id":null,"dir":"Reference","previous_headings":"","what":"Lowpass filtering of time series data — lpfilt","title":"Lowpass filtering of time series data — lpfilt","text":"intended use method smoothing, although specifying wp ws differently one can achieve highpass bandpass filtering well. However, lowpass filtering done pupillometry data.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/lpfilt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lowpass filtering of time series data — lpfilt","text":"","code":"lpfilt(eyeris, wp = 4, ws = 8, rp = 1, rs = 35, plot_freqz = FALSE)"},{"path":"http://shawnschwartz.com/eyeris/reference/lpfilt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lowpass filtering of time series data — lpfilt","text":"eyeris object class eyeris derived load(). wp end passband frequency Hz (desired lowpass cutoff). ws start stopband frequency Hz (required lowpass cutoff). rp Required maximal ripple within passband dB. rs Required minimal attenuation within stopband dB. plot_freqz Boolean flag displaying filter frequency response.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/lpfilt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lowpass filtering of time series data — lpfilt","text":"eyeris object new column timeseries: pupil_lpfilt.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/lpfilt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lowpass filtering of time series data — lpfilt","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() |>   eyeris::interpolate() |>   eyeris::lpfilt(plot_freqz = TRUE) } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/plot.eyeris.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot pre-processed pupil data from eyeris — plot.eyeris","title":"Plot pre-processed pupil data from eyeris — plot.eyeris","text":"S3 plotting method objects class eyeris. Plots single-panel timeseries subset pupil timeseries preprocessing step. intended use function provide simple method qualitatively assessing consequences preprocessing recipe parameters raw pupillary signal.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/plot.eyeris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot pre-processed pupil data from eyeris — plot.eyeris","text":"","code":"# S3 method for class 'eyeris' plot(   x,   ...,   steps = NULL,   num_previews = NULL,   preview_duration = NULL,   preview_window = NULL,   seed = NULL )"},{"path":"http://shawnschwartz.com/eyeris/reference/plot.eyeris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot pre-processed pupil data from eyeris — plot.eyeris","text":"x object class eyeris derived load(). ... Additional arguments passed plot. steps steps plot; defaults (.e., plot steps). Otherwise, pass vector containing index step(s) want plot, index 1 original raw pupil timeseries. num_previews Number random example \"epochs\" generate previewing effect preprocessing step pupil timeseries. preview_duration Time seconds randomly selected preview. preview_window start stop raw timestamps used subset preprocessed data step eyeris workflow visualization. Defaults NULL, meaning random epochs defined num_examples example_duration plotted. override random epochs, set example_timelim vector relative start stop times (e.g., c(5000, 6000) indicate raw data 5-6 seconds data recorded 1000 Hz). Note, start/stop time values indicated relate raw index position pupil sample 1 n (need specified manually user depending sampling rate recording; .e., 5000-6000 epoch positioned 5-6 seconds start timeseries, sampled 1000 Hz). seed Random seed current plotting session. Leave NULL select num_previews number random preview \"epochs\" (preview_duration) time. Otherwise, choose seed-integer normally select base::set.seed(), able continue re-plotting random example pupil epochs time – helpful adjusting parameters within across eyeris workflow steps.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/plot.eyeris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot pre-processed pupil data from eyeris — plot.eyeris","text":"return value; iteratively plots subset pupil timeseries preprocessing step run.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/plot.eyeris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot pre-processed pupil data from eyeris — plot.eyeris","text":"","code":"if (FALSE) { # \\dontrun{ # using the default 10000 to 20000 ms time subset plot(eyeris_data)  # using a custom time subset (i.e., 1 to 500 ms) plot(eyeris_data, preview_window = c(1, 500)) } # }"},{"path":"http://shawnschwartz.com/eyeris/reference/sticker.html","id":null,"dir":"Reference","previous_headings":"","what":"eyeris package logo (hexagon sticker) — sticker","title":"eyeris package logo (hexagon sticker) — sticker","text":"eyeris package logo (hexagon sticker)","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/sticker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eyeris package logo (hexagon sticker) — sticker","text":"","code":"sticker"},{"path":"http://shawnschwartz.com/eyeris/reference/sticker.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eyeris package logo (hexagon sticker) — sticker","text":"png image file rendered README html reports.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Z-Score pupil timeseries data — zscore","title":"Z-Score pupil timeseries data — zscore","text":"intended use method scale arbitrary units pupil size timeseries mean 0 standard deviation 1. accomplished mean centering data points dividing standard deviation (.e., z-scoring data, similar base::scale()). Z-scoring pupil data helpful trial-level -subjects analyses arbitrary units pupil size recorded tracker scale across participants, therefore make analyses depend data one participant difficult interpret.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Z-Score pupil timeseries data — zscore","text":"","code":"zscore(eyeris)"},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Z-Score pupil timeseries data — zscore","text":"eyeris object class eyeris dervived load().","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Z-Score pupil timeseries data — zscore","text":"numeric vector giving number characters (code points) element character vector. Missing string missing length.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Z-Score pupil timeseries data — zscore","text":"general, common z-score pupil data within given participant, furthermore, z-score participant's data function block number (tasks/experiments participants complete one block trials) account potential time--task effects across task/experiment blocks. , use eyeris package intended, need specify groups participant/block-level situations described . eyeris designed preprocess single block pupil data single participant, one time. Therefore, later merge preprocessed data eyeris, individual, preprocessed block data participant already independently scaled others. Additionally, intend compare mean z-scored pupil size across task conditions, memory successes vs. memory failures, set behavioral outcome (.e., success/failure) variable grouping variable within analysis. , consequently obtain mean pupil size 0 standard deviation 1 within group (since scaled pupil size calculated timeseries outcome variable group, separately). Instead, compute z-score entire pupil timeseries (epoching data), split take mean z-scored timeseries function condition variable.","code":""},{"path":"http://shawnschwartz.com/eyeris/reference/zscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Z-Score pupil timeseries data — zscore","text":"","code":"if (FALSE) { # \\dontrun{ system.file(\"extdata\", \"assocret.asc\", package = \"eyeris\") |>   eyeris::load_asc() |>   eyeris::deblink(extend = 50) |>   eyeris::detransient() |>   eyeris::interpolate() |>   eyeris::lpfilt(plot_freqz = TRUE) |>   eyeris::zscore() } # }"}]
