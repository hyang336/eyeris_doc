% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glassbox.R
\name{glassbox}
\alias{glassbox}
\title{A "glassbox" pipeline wrapper for \code{eyeris}}
\usage{
glassbox(file, interactive = FALSE, time_range = c(10000, 20000), ...)
}
\arguments{
\item{file}{An SR Research EyeLink \code{.asc} file generated by the official
EyeLink \code{edf2asc} command.}

\item{interactive}{A flag to indicate whether to run the \code{glassbox} pipeline
autonomously all the way through (set to \code{FALSE}, the default), or to
interactively provide a visualization after each pipeline step, where you
must also indicate "(y)es" or "(n)o" to either proceed or cancel the
current \code{glassbox} pipeline operation (set to \code{TRUE}).}

\item{time_range}{The start and stop raw timestamps used to subset the
preprocessed data from each step of the \code{eyeris} pipeline for visualization.}

\item{...}{Additional arguments to override the default, prescribed settings.}
}
\description{
This \code{glassbox} function (in contrast to a "blackbox" function where you run
it and get a result but have no (or little) idea as to how you got from input
to output) has a few primary benefits over calling each exported function
from \code{eyeris} separately.
}
\details{
First, this \code{glassbox} function provides a highly opinionated prescription of
steps and starting parameters we believe any pupillometry researcher should
use as their defaults when preprocessing pupillometry data.

Second, and not mutually exclusive from the first point, using this function
should ideally reduce the probability of accidental mishaps when
"reimplementing" the steps from the preprocessing pipeline both within and
across projects. We hope to streamline the process in such a way that you
could collect a pupillometry dataset and within a few minutes assess the
quality of those data while simultaneously running a full preprocessing
pipeline in 1-ish line of code!

Third, \code{glassbox} provides an "interactive" framework where you can evaluate
the consequences of the parameters within each step on your data in real
time, facilitating a fairly easy-to-use workflow for parameter optimization
on your particular dataset. This process essentially takes each of the
opinionated steps and provides a pre-/post-plot of the timeseries data for
each step so you can adjust parameters and re-run the pipeline until you are
satisfied with the choices of your paramters and their consequences on your
pupil timeseries data.
}
\examples{
\dontrun{
demo_data <- system.file("extdata", "assocret.asc", package = "eyeris")

# (1) examples using the default prescribed parameters and pipeline recipe
## (a) run an automated pipeline with no real-time inspection of parameters
output <- eyeris::glassbox(demo_data)

## (b) run an interactive pipeline
output <- eyeris::glassbox(demo_data, interactive = TRUE)

# (2) examples overriding the default parameters
output <- eyeris::glassbox(demo_data,
  interactive = TRUE,
  deblink = list(extend = 40),
  lpfilt = list(plot_freqz = FALSE)
)
}

}
