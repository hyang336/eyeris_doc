% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bidsify.R
\name{bidsify}
\alias{bidsify}
\title{Save out pupil timeseries data in a BIDS-like structure}
\usage{
bidsify(
  eyeris,
  save.all = TRUE,
  epochs.list = NULL,
  merge.epochs = FALSE,
  bids.dir = NULL,
  bids.subid = NULL,
  bids.sessionid = NULL,
  bids.taskid = NULL,
  bids.runid = NULL,
  save.raw = TRUE
)
}
\arguments{
\item{eyeris}{An object of class \code{eyeris} dervived from \code{\link[=load]{load()}}.}

\item{save.all}{Logical flag indicating whether all epochs are to be saved
or only a subset of them. Defaults to TRUE.}

\item{merge.epochs}{Logical flag indicating whether epochs should be saved
as one file or as separate files. Defaults to FLASE (no merge).}

\item{bids.dir}{Base BIDS directory.}

\item{bids.subid}{BIDS subject ID.}

\item{bids.sessionid}{BIDS session ID.}

\item{bids.taskid}{BIDS task ID.}

\item{bids.runid}{BIDS run ID.}

\item{save.raw}{Logical flag indicating whether to save raw pupil data in
addition to epoched data. Defaults to TRUE.}

\item{epoch.list}{List of epochs to be saved. Defaults to NULL.}
}
\description{
This method provides a structured way to save out pupil data in a BIDS-like
structure. The method saves out epoched data as well as the raw pupil
timeseries, and formats the directory and filename structures based on the
metadata you provide.
}
\details{
In the future, we intend for this function to save out the data in an
official BIDS format for eyetracking data (see \href{https://github.com/bids-standard/bids-specification/pull/1128}{the proposal currently under review here}).
At this time, however, this function instead takes a more BIDS-inspired
approach to organizing the output files for preprocessed pupil data.
}
\examples{
system.file("extdata", "assocret.asc", package = "eyeris") |>
  eyeris::load() |>
  eyeris::deblink(extend = 50) |>  # Bleed around blink periods just long enough to remove majority of deflections due to eyelid movements
  eyeris::despeed() |>
  eyeris::interpolate() |>
  eyeris::lpfilt(plot_freqz = TRUE) |>
  eyeris::zscore() |>
  eyeris::epoch(event.marker = "CUE_START_", 
                dur.secs = 1,
                matching.type = "contains",
                metadata.template = "trial") |>
  eyeris::bidsify(bids.dir = 'path/to/derivatives',
                  bids.subid = '001',
                  bids.sessionid = '01',
                  bids.taskid = 'assocret',
                  bids.runid = '01')

}
