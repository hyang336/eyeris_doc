% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bidsify.R
\name{bidsify}
\alias{bidsify}
\title{Save out pupil timeseries data in a BIDS-like structure}
\usage{
bidsify(
  eyeris,
  save_all = TRUE,
  epochs_list = NULL,
  merge_epochs = FALSE,
  bids_dir = NULL,
  participant_id = NULL,
  session_num = NULL,
  task_name = NULL,
  run_num = NULL,
  save_raw = TRUE
)
}
\arguments{
\item{eyeris}{An object of class \code{eyeris} dervived from \code{\link[=load]{load()}}.}

\item{save_all}{Logical flag indicating whether all epochs are to be saved
or only a subset of them. Defaults to TRUE.}

\item{epochs_list}{List of epochs to be saved. Defaults to NULL.}

\item{merge_epochs}{Logical flag indicating whether epochs should be saved
as one file or as separate files. Defaults to FLASE (no merge).}

\item{bids_dir}{Base bids_directory.}

\item{participant_id}{BIDS subject ID.}

\item{session_num}{BIDS session ID.}

\item{task_name}{BIDS task ID.}

\item{run_num}{BIDS run ID.}

\item{save_raw}{Logical flag indicating whether to save_raw pupil data in
addition to epoched data. Defaults to TRUE.}
}
\description{
This method provides a structured way to save out pupil data in a BIDS-like
structure. The method saves out epoched data as well as the raw pupil
timeseries, and formats the directory and filename structures based on the
metadata you provide.
}
\details{
In the future, we intend for this function to save out the data in an
official BIDS format for eyetracking data (see \href{https://github.com/bids-standard/bids-specification/pull/1128}{the proposal currently under review here}).
At this time, however, this function instead takes a more BIDS-inspired
approach to organizing the output files for preprocessed pupil data.
}
\examples{
# Bleed around blink periods just long enough to remove majority of
#  deflections due to eyelid movements
\dontrun{
system.file("extdata", "assocret.asc", package = "eyeris") |>
  eyeris::load() |>
  eyeris::deblink(extend = 50) |>
  eyeris::despeed() |>
  eyeris::interpolate() |>
  eyeris::lpfilt(plot_freqz = TRUE) |>
  eyeris::zscore() |>
  eyeris::epoch(
    event_marker = "CUE_START_",
    duration = 1,
    matching_type = "contains",
    metadata_template = "trial"
  ) |>
  eyeris::bidsify(
    bids_dir = "derivatives",
    participant_id = "001",
    session_num = "01",
    task_name = "assocret",
    run_num = "01"
  )
}

}
